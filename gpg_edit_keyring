#!/bin/bash
#---
## by Bor Kraljiƒç <pyrobor[at]ver[dot]si>
## Licence is GPL v2 or higher
##
## Script for easy manipulation of gpg keyrings
## Basicly so you don't need to remember those gpg comands. 
##
#---



#---------------------------------------------------------------------
## Shows usage
#---------------------------------------------------------------------
function show_usage() {
usage="Usage: $(basename $0) -k/-m keyring -d/-a/-i #keyID
-k|--keyring\t which keyring to edit (without action it will just show keyring)
-m|--minimize\t minimize size of selected keyring
-d|--delete\t delete selected key from keyring
-a|--add\t add selcted key to keyring
-i|--import\t import selected key to keyring
-s|--search\t search for key in subdirectories (doesn't need -k)
-h|--help\t show this help"

echo -e "$usage"
}

#---------------------------------------------------------------------
## @param keyID
## @param path to keyring
##
## Add key to selected keyring.
#---------------------------------------------------------------------
function gpg_add_key() {
  local key_to_add=$1
  local path_to_keyring=$2
  gpg --export-options export-minimal --export --armor $key_to_add |\
    gpg --no-default-keyring --keyring $path_to_keyring --import
  
  gpg_minimize_keyring $path_to_keyring
}

#---------------------------------------------------------------------
## @param keyID
## @param path to keyring
##
## Remove key to selected keyring.
#---------------------------------------------------------------------
function gpg_del_key() {
  local key_to_delete=$1
  local path_to_keyring=$2
  gpg --batch --yes --no-default-keyring  --keyring $path_to_keyring \
      --delete-keys $key_to_delete
}

#---------------------------------------------------------------------
## @param keyID
## @param path to grimoire
##
## Search for keyID in all "*.gpg" files in grimoire path. 
#---------------------------------------------------------------------
function search_gpg_key() {
  local key_to_search=$1
  local path_to_grimoire=${2:-`pwd`}
  for gpg_keyring in \
  $(find $path_to_grimoire -mindepth 0 -maxdepth 3 -iname "*.gpg" -printf "%P\n")
  do
    first_found=$(gpg --batch --list-options show-keyring $gpg_keyring \
                  2> /dev/null |grep "$key_to_search"|head -n1)
    if [[ $first_found != "" ]];then
      echo "Key $key_to_search found in $gpg_keyring:"
      echo $first_found
    fi
    unset first_found
  done
}

#---------------------------------------------------------------------
## @param keyID
## @param path to keyring
##
## Import key to selected keyring.
#---------------------------------------------------------------------
function gpg_import_key() {
  local key_to_import=$1
  local path_to_keyring=$2
  gpg --import-options import-minimal --no-default-keyring \
      --keyring $path_to_keyring --recv-keys $key_to_import
  gpg_minimize_keyring $path_to_keyring
}

#---------------------------------------------------------------------
## @param path to keyring
##
## Show keys in keyring.
#---------------------------------------------------------------------
function gpg_show_keyring() {
  local path_to_keyring=$1
  gpg --list-options show-keyring $path_to_keyring
}

#---------------------------------------------------------------------
## @param path to keyring
##
## minimizes the size of the keyring based on Jaka Kranjc command:
##    find -iname "*.gpg" | while read a; do gpg --no-default-keyring --keyring ./$a \
##      --export-options export-minimal --output ${a}2 --export;
##    du -sh ${a} ${a}2; mv ${a}2 ${a}; done
#---------------------------------------------------------------------
function gpg_minimize_keyring() {
 local path_to_keyring=$1

 gpg --no-default-keyring --keyring ./$path_to_keyring \
      --export-options export-minimal --output ${path_to_keyring}2 --export;
 mv ${path_to_keyring}2 ${path_to_keyring}
}


#---------------------------------------------------------------------
## process the params
#---------------------------------------------------------------------
##### lets check params
TEMP_OPTS=$(getopt -o 'k:d:a:i:s:v:m:h' -l 'keyring:,delete:,add:,import:,\
search:,view:,minimize:,help' \
-n "$(basename $0)" -- "$@")
if [[ $? != 0 ]]; then  show_usage; exit 3; fi
# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP_OPTS"
unset TEMP_OPTS

while true; do
  case "$1" in
   "-k"|"--keyring")  mode="view";     keyring=$2 ; shift 2 ;;
   "-m"|"--minimize") mode="minimize"  keyring=$2 ; shift 2 ;;
   "-d"|"--delete")   mode="delete";   keyid=$2;    shift 2 ;;
   "-a"|"--add")      mode="add";      keyid=$2;    shift 2 ;;
   "-i"|"--import")   mode="import";   keyid=$2;    shift 2 ;;
   "-s"|"--search")   mode="search";   keyid=$2;    shift 2 ;;
   "-v"|"--view")     mode="view";     keyring=$2;  shift 2 ;;
   "-h"|"--help")     show_usage;      exit 2 ;;
   --)                shift;           break ;;
   *)                 show_usage;      exit 3 ;;
  esac
done

case "$mode" in
  add)    gpg_add_key $keyid $keyring;;
  delete) gpg_del_key $keyid $keyring;;
  import) gpg_import_key $keyid $keyring;;
  search) search_gpg_key $keyid;;
  view) gpg_show_keyring $keyring;;
  minimize) gpg_minimize_keyring $keyring
esac
